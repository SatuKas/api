// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  username  String   @unique
  devices   Device[]
  books Book[]
  bookMembers BookMember[] @relation("UserBookMember")
  invitedBy BookMember[] @relation("InvitedBy")
  isVerified   Boolean  @default(false) @map("is_verified")
  verifiedAt   DateTime? @map("verified_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Device {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @map("user_id")
  userAgent    String   @map("user_agent")
  ipAddress    String   @map("ip_address")
  refreshToken String? @map("refresh_token")
  isRevoked    Boolean  @default(false) @map("is_revoked")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("device")
}

// Book is a collection of financial data for a specific purpose
model Book {
  id String @id @default(uuid())
  name String
  description String?
  ownerId String @map("owner_id")
  owner User @relation(fields: [ownerId], references: [id])
  members BookMember[]
  settings BookSetting[]
  accounts Account[]
  journals Journal[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("book")
}

// BookMember is a user who has access to a book
model BookMember {
  id String @id @default(uuid())
  bookId String @map("book_id")
  book Book @relation(fields: [bookId], references: [id])
  userId String @map("user_id")
  user User @relation("UserBookMember", fields: [userId], references: [id])
  role BookMemberRole @default(OWNER)
  status BookMemberStatus @default(ACCEPTED)
  invitedBy String? @map("invited_by")
  invitedByUser User? @relation("InvitedBy", fields: [invitedBy], references: [id])
  invitedAt DateTime? @map("invited_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("book_member")
}

// BookSetting is a setting for a book
model BookSetting {
  id String @id @default(uuid())
  bookId String @map("book_id")
  book Book @relation(fields: [bookId], references: [id])
  currency String @default("IDR")
  modules BookModule[]
  reports BookReport[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("book_setting")
}

model Account {
  id String @id @default(uuid())
  bookId String @map("book_id")
  book Book @relation(fields: [bookId], references: [id])
  name String
  code String
  isGroup Boolean @default(false) @map("is_group")
  parentId String? @map("parent_id")
  parent Account? @relation("ParentAccount", fields: [parentId], references: [id])
  children Account[] @relation("ParentAccount")
  type AccountType @default(ASSET)
  description String?
  entries JournalEntry[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account")
}

model Journal {
  id String @id @default(uuid())
  bookId String @map("book_id")
  book Book @relation(fields: [bookId], references: [id])
  date DateTime
  description String?
  refType BookModule @map("ref_type")
  refId String @map("ref_id")
  entries JournalEntry[]
  totalAmount Decimal @map("total_amount")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("journal")
}

model JournalEntry {
  id String @id @default(uuid())
  journalId String @map("journal_id")
  journal Journal @relation(fields: [journalId], references: [id])
  accountId String @map("account_id")
  account Account @relation(fields: [accountId], references: [id])
  amount Decimal @map("amount")
  debit Decimal @map("debit")
  credit Decimal @map("credit")
  position Int @map("position")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("journal_entry")
}

// BookMemberRole is a role for a book member
enum BookMemberRole {
  OWNER
  VIEWER
}

// BookMemberStatus is a status for a book member
enum BookMemberStatus {
  PENDING
  ACCEPTED
  REJECTED
  INACTIVE
}

// BookModule is a module for a book
enum BookModule {
  INCOME
  EXPENSE
  SAVING
  INVESTMENT
  DEBT
  ASSET
  LIABILITY
  PROCUREMENT
  RECEIPT
  PAYMENT
  TRANSFER
  RECONCILIATION
  PURCHASING
  INVENTORY
  SALES
  CUSTOMER
  VENDOR
  EMPLOYEE
}

// BookReport is a report for a book
enum BookReport {
  BALANCE_SHEET
  PROFIT_AND_LOSS
  CASH_FLOW
  INCOME_STATEMENT
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}